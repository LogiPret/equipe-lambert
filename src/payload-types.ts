/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (number | null) | Media;
  };
  layout: (
    | CallToActionBlock
    | ContentBlock
    | MediaBlock
    | ArchiveBlock
    | FormBlock
    | {
        text: string;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'button';
      }
    | {
        badgeText: string;
        badgeIcon?: string | null;
        title: string;
        subtitle?: string | null;
        description?: string | null;
        primaryButton: {
          text: string;
          icon?: string | null;
          link?: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
        };
        secondaryButton?: {
          text?: string | null;
          link?: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
        };
        heroImage: number | Media;
        backgroundImage?: (number | null) | Media;
        statsBoxNumber?: string | null;
        statsBoxText?: string | null;
        statsBoxDescription?: string | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'hero';
      }
    | {
        stats: {
          number: number;
          /**
           * e.g., +, %, h, etc.
           */
          suffix?: string | null;
          label: string;
          description: string;
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
        blockType: 'stats';
      }
    | {
        title: string;
        subtitle: string;
        services: {
          icon: 'home' | 'building';
          title: string;
          subtitle: string;
          description: string;
          image: number | Media;
          features: {
            text: string;
            id?: string | null;
          }[];
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
        blockType: 'services';
      }
    | {
        title: string;
        subtitle: string;
        members: {
          name: string;
          role: string;
          speciality: string;
          image: number | Media;
          experience: string;
          id?: string | null;
        }[];
        advantages: {
          title: string;
          subtitle: string;
          items: {
            icon: 'handshake' | 'target' | 'shield';
            title: string;
            description: string;
            id?: string | null;
          }[];
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'team';
      }
    | {
        title: string;
        subtitle: string;
        properties: {
          image: number | Media;
          price: string;
          address: string;
          beds: number;
          baths: number;
          sqft: string;
          type: 'maison' | 'condo' | 'townhouse' | 'loft';
          status: 'a_vendre' | 'vendu' | 'option_achat';
          id?: string | null;
        }[];
        showAllButton: {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            label: string;
          };
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'properties';
      }
    | {
        title: string;
        subtitle: string;
        testimonials: {
          name: string;
          location: string;
          rating: number;
          image: number | Media;
          text: string;
          id?: string | null;
        }[];
        stats?:
          | {
              rating: string;
              label: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'testimonials';
      }
    | {
        backgroundColor: 'gradient_blue' | 'dark_blue' | 'navy';
        title: string;
        subtitle?: string | null;
        button: {
          text: string;
          icon?: ('dollar_sign' | 'key' | 'phone' | 'mail') | null;
          variant?: ('primary' | 'secondary') | null;
          link?: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: number | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: number | Post;
                } | null);
            url?: string | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'ctaBanner';
      }
    | {
        backgroundColor: 'gradient_blue' | 'dark_blue' | 'navy';
        title: string;
        subtitle?: string | null;
        button: {
          text: string;
          icon?: ('dollar_sign' | 'key' | 'phone' | 'mail') | null;
          variant?: ('primary' | 'secondary') | null;
          /**
           * Enter the block ID to scroll to. Common IDs: vendreHero-0, whyChooseUs-1, sellingProcess-2, vendreCTA-3, contact-4, etc. The format is "blockType-index" where index starts at 0.
           */
          scrollTarget: string;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'bannerCTAScroll';
      }
    | {
        title: string;
        subtitle: string;
        contactInfo: {
          icon: 'phone' | 'mail' | 'location';
          title: string;
          primary: string;
          description?: string | null;
          id?: string | null;
        }[];
        officeImage: {
          image: number | Media;
          description: string;
        };
        form: {
          title: string;
          formFields: {
            fieldType: 'text' | 'email' | 'tel' | 'number' | 'textarea' | 'select' | 'checkbox';
            /**
             * Unique identifier for this field (e.g., firstName, email, message)
             */
            name: string;
            /**
             * Display label for the field
             */
            label: string;
            placeholder?: string | null;
            required?: boolean | null;
            width?: ('full' | 'half') | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            rows?: number | null;
            id?: string | null;
          }[];
          submitButton: {
            text: string;
            loadingText?: string | null;
          };
          /**
           * Text that appears next to the checkbox (e.g., "I agree to the terms and conditions")
           */
          checkboxText?: string | null;
          /**
           * Message displayed after successful form submission
           */
          successMessage?: string | null;
          disclaimer: string;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'contact';
      }
    | {
        logo: {
          title: string;
          subtitle: string;
        };
        navigation: {
          label: string;
          href: string;
          id?: string | null;
        }[];
        contactButton: {
          text: string;
          phone: string;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'header';
      }
    | {
        logo: {
          title: string;
          subtitle: string;
          description: string;
        };
        sections: {
          title: string;
          links: {
            label: string;
            href: string;
            id?: string | null;
          }[];
          id?: string | null;
        }[];
        contact: {
          phone: string;
          phoneDescription: string;
          email: string;
          emailDescription: string;
          address: string;
          addressLine2: string;
          addressDescription: string;
        };
        copyright: string;
        legalLinks?:
          | {
              label: string;
              href: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'footer';
      }
    | MapSectionBlock
    | {
        title: string;
        subtitle: string;
        collection: 'posts';
        postsLimit?: number | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'blogCarousel';
      }
    | {
        title: string;
        subtitle: string;
        choices?:
          | {
              icon: 'trendingUp' | 'clock' | 'shield' | 'target' | 'award' | 'users' | 'bell';
              /**
               * This color will be used for icons, backgrounds, and statistics in different shades.
               */
              color: 'green' | 'blue' | 'red' | 'yellow' | 'purple' | 'pink' | 'indigo' | 'emerald' | 'teal' | 'cyan';
              title: string;
              description: string;
              statValue: string;
              statLabel: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'whyChooseUs';
      }
    | {
        title: string;
        subtitle: string;
        steps?:
          | {
              icon:
                | 'home'
                | 'search'
                | 'camera'
                | 'users'
                | 'dollarSign'
                | 'key'
                | 'calendar'
                | 'checkCircle'
                | 'star'
                | 'target'
                | 'clipboardList'
                | 'handshake';
              title: string;
              description: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'landingProcess';
      }
    | {
        title: string;
        subtitle: string;
        description: string;
        defaultValues?: {
          homePrice?: number | null;
          downPayment?: number | null;
          interestRate?: number | null;
          loanTerm?: number | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'mortgageCalculator';
      }
    | {
        /**
         * Select the rendering mode (vendre or acheter) - changes button text, colors, and styling
         */
        mode: 'vendre' | 'acheter';
        /**
         * Title will automatically adjust based on mode: "Prêt à vendre votre propriété?" for vendre mode, "Prêt à trouver votre propriété idéale ?" for acheter mode. Leave empty to use default.
         */
        title?: string | null;
        /**
         * Subtitle will automatically adjust based on mode. Leave empty to use default mode-specific text.
         */
        subtitle?: string | null;
        /**
         * Primary button text will automatically adjust based on mode: "Évaluation gratuite" for vendre mode, "Commencer ma recherche" for acheter mode. Leave empty to use default.
         */
        primaryButtonText?: string | null;
        /**
         * Enter the block ID to scroll to when the primary button is clicked. Common IDs: landingHero-0, whyChooseUs-1, sellingProcess-2, contact-3, etc. Format: "blockType-index"
         */
        primaryButtonTarget?: string | null;
        /**
         * Secondary button text will automatically adjust based on mode: "Appelez-nous" for vendre mode, "Consultation gratuite" for acheter mode. Leave empty to use default.
         */
        secondaryButtonText?: string | null;
        /**
         * Enter the block ID to scroll to when the secondary button is clicked, or leave empty to use phone number. Format: "blockType-index"
         */
        secondaryButtonTarget?: string | null;
        /**
         * Phone number to call when secondary button is clicked (only used if no target section is selected)
         */
        phoneNumber?: string | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'landingCTA';
      }
    | {
        /**
         * Select the rendering mode (vendre or acheter) - changes content, colors, and styling
         */
        mode: 'vendre' | 'acheter';
        /**
         * Choose whether the main image appears on the left or right side
         */
        imagePosition: 'left' | 'right';
        mainContent?: {
          /**
           * Badge text will automatically adjust based on mode: "VENDEZ INTELLIGEMMENT" for vendre mode, "ACHETEZ COMME UN PRO" for acheter mode. Leave empty to use default.
           */
          badgeText?: string | null;
          /**
           * Title will automatically adjust based on mode. Leave empty to use default mode-specific text.
           */
          title?: string | null;
          /**
           * Main description will automatically adjust based on mode. Leave empty to use default.
           */
          description?: string | null;
          /**
           * Highlighted text (shown in bold). Will auto-adjust based on mode if left empty.
           */
          highlight?: string | null;
          /**
           * Button text will automatically adjust based on mode: "Obtenir mes ressources" for vendre, "Recevoir mes ressources" for acheter. Leave empty to use default.
           */
          buttonText?: string | null;
          /**
           * Action to perform when button is clicked (e.g., scroll target, external URL, etc.)
           */
          buttonAction?: string | null;
        };
        imageContent?: {
          /**
           * Main image for the resource section. Will use placeholder if not provided.
           */
          mainImage?: (number | null) | Media;
          /**
           * Alt text for the image. Will auto-generate based on mode if left empty.
           */
          imageAlt?: string | null;
          /**
           * Caption overlay on the image. Will auto-adjust based on mode if left empty.
           */
          imageCaption?: string | null;
          /**
           * Subcaption overlay on the image. Will auto-adjust based on mode if left empty.
           */
          imageSubcaption?: string | null;
        };
        resources?: {
          /**
           * Title for the resources section. Will auto-adjust based on mode if left empty.
           */
          title?: string | null;
          /**
           * Subtitle for the resources section. Will auto-adjust based on mode if left empty.
           */
          subtitle?: string | null;
          /**
           * Add resources to display in cards below the main content.
           */
          items?:
            | {
                title: string;
                description: string;
                icon: 'download' | 'fileText' | 'calculator' | 'checkSquare';
                color: 'blue' | 'emerald' | 'indigo' | 'amber' | 'red';
                /**
                 * Button text for this resource. Defaults to "Télécharger" if empty.
                 */
                buttonText?: string | null;
                /**
                 * Action to perform when this resource button is clicked (e.g., download URL, scroll target, etc.)
                 */
                buttonAction?: string | null;
                id?: string | null;
              }[]
            | null;
        };
        id?: string | null;
        blockName?: string | null;
        blockType: 'resourceBlock';
      }
    | {
        title: string;
        description: string;
        closingStatement: string;
        ctaText: string;
        /**
         * Enter the block ID to scroll to when the primary button is clicked. Common IDs: vendreHero-0, whyChooseUs-1, sellingProcess-2, contact-3, etc. Format: "blockType-index"
         */
        ctaTarget?: string | null;
        benefitsTitle: string;
        benefits: {
          text: string;
          id?: string | null;
        }[];
        deliverablesTitle: string;
        deliverables: {
          icon: 'home' | 'trendingUp' | 'users';
          title: string;
          description: string;
          id?: string | null;
        }[];
        id?: string | null;
        blockName?: string | null;
        blockType: 'evaluationGratuite';
      }
    | {
        /**
         * Select the rendering mode (vendre or acheter) - changes form fields and styling
         */
        mode: 'vendre' | 'acheter';
        /**
         * Badge text will automatically adjust based on mode: "VENDEZ VOTRE PROPRIÉTÉ" for vendre mode, "ACCÈS PRIVILÉGIÉ AUX NOUVEAUTÉS" for acheter mode
         */
        badgeText: string;
        /**
         * Title will automatically adjust based on mode: "Vendez votre propriété" for vendre mode, "Trouvez la propriété" for acheter mode
         */
        title: string;
        /**
         * Subtitle will automatically adjust based on mode: "rapidement et au meilleur prix" for vendre mode, "de vos rêves" for acheter mode
         */
        subtitle?: string | null;
        /**
         * Description will automatically adjust based on the selected mode
         */
        description: string;
        stats?:
          | {
              value: string;
              label: string;
              id?: string | null;
            }[]
          | null;
        primaryButton: {
          text: string;
          /**
           * Choose whether this button scrolls to a block on the same page or links to another page.
           */
          actionType: 'scroll' | 'link';
          /**
           * Select the block to scroll to from the available blocks on this page.
           */
          scrollTarget?: string | null;
          link?: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?: {
              relationTo: 'pages';
              value: number | Page;
            } | null;
            url?: string | null;
          };
        };
        secondaryButton: {
          text: string;
          /**
           * Choose whether this button scrolls to a block on the same page or links to another page.
           */
          actionType: 'scroll' | 'link';
          /**
           * Select the block to scroll to from the available blocks on this page.
           */
          scrollTarget?: string | null;
          link?: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?: {
              relationTo: 'pages';
              value: number | Page;
            } | null;
            url?: string | null;
          };
        };
        formTitle: string;
        formFields?: {
          /**
           * Placeholder for the property address field (Vendre mode only)
           */
          addressPlaceholder?: string | null;
          /**
           * Placeholder for the sale timeframe field (Vendre mode only)
           */
          timeframePlaceholder?: string | null;
          /**
           * Placeholder for the property type field (Acheter mode only)
           */
          propertyTypePlaceholder?: string | null;
          /**
           * Placeholder for the city field (Acheter mode only)
           */
          cityPlaceholder?: string | null;
          firstNamePlaceholder?: string | null;
          lastNamePlaceholder?: string | null;
          phonePlaceholder?: string | null;
          emailPlaceholder?: string | null;
          submitButtonText?: string | null;
          disclaimerText?: string | null;
        };
        /**
         * Available timeframe options for sale (Vendre mode only)
         */
        timeframeOptions?:
          | {
              option: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Available property type options (Acheter mode only)
         */
        propertyTypeOptions?:
          | {
              option: string;
              id?: string | null;
            }[]
          | null;
        /**
         * Optional background image for the hero section
         */
        backgroundImage?: (number | null) | Media;
        id?: string | null;
        blockName?: string | null;
        blockType: 'landingHero';
      }
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (number | Post)[] | null;
  categories?: (number | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (number | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: number | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MapSectionBlock".
 */
export interface MapSectionBlock {
  title: string;
  subtitle: string;
  properties?:
    | {
        id: number;
        address: string;
        price: string;
        status: 'À vendre' | 'Vendu';
        type: 'Maison' | 'Condo' | 'Duplex' | 'Triplex' | 'Commercial';
      }[]
    | null;
  serviceAreas?:
    | {
        name: string;
        status: string;
        /**
         * Optional: CSS class for badge color
         */
        badgeColor?: string | null;
        /**
         * Optional: CSS class for background color
         */
        bgColor?: string | null;
        /**
         * Optional: CSS class for border color
         */
        borderColor?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mapSectionBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        button?:
          | T
          | {
              text?: T;
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    appearance?: T;
                  };
              id?: T;
              blockName?: T;
            };
        hero?:
          | T
          | {
              badgeText?: T;
              badgeIcon?: T;
              title?: T;
              subtitle?: T;
              description?: T;
              primaryButton?:
                | T
                | {
                    text?: T;
                    icon?: T;
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          appearance?: T;
                        };
                  };
              secondaryButton?:
                | T
                | {
                    text?: T;
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          appearance?: T;
                        };
                  };
              heroImage?: T;
              backgroundImage?: T;
              statsBoxNumber?: T;
              statsBoxText?: T;
              statsBoxDescription?: T;
              id?: T;
              blockName?: T;
            };
        stats?:
          | T
          | {
              stats?:
                | T
                | {
                    number?: T;
                    suffix?: T;
                    label?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        services?:
          | T
          | {
              title?: T;
              subtitle?: T;
              services?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    subtitle?: T;
                    description?: T;
                    image?: T;
                    features?:
                      | T
                      | {
                          text?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        team?:
          | T
          | {
              title?: T;
              subtitle?: T;
              members?:
                | T
                | {
                    name?: T;
                    role?: T;
                    speciality?: T;
                    image?: T;
                    experience?: T;
                    id?: T;
                  };
              advantages?:
                | T
                | {
                    title?: T;
                    subtitle?: T;
                    items?:
                      | T
                      | {
                          icon?: T;
                          title?: T;
                          description?: T;
                          id?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        properties?:
          | T
          | {
              title?: T;
              subtitle?: T;
              properties?:
                | T
                | {
                    image?: T;
                    price?: T;
                    address?: T;
                    beds?: T;
                    baths?: T;
                    sqft?: T;
                    type?: T;
                    status?: T;
                    id?: T;
                  };
              showAllButton?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        testimonials?:
          | T
          | {
              title?: T;
              subtitle?: T;
              testimonials?:
                | T
                | {
                    name?: T;
                    location?: T;
                    rating?: T;
                    image?: T;
                    text?: T;
                    id?: T;
                  };
              stats?:
                | T
                | {
                    rating?: T;
                    label?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        ctaBanner?:
          | T
          | {
              backgroundColor?: T;
              title?: T;
              subtitle?: T;
              button?:
                | T
                | {
                    text?: T;
                    icon?: T;
                    variant?: T;
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          appearance?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        bannerCTAScroll?:
          | T
          | {
              backgroundColor?: T;
              title?: T;
              subtitle?: T;
              button?:
                | T
                | {
                    text?: T;
                    icon?: T;
                    variant?: T;
                    scrollTarget?: T;
                  };
              id?: T;
              blockName?: T;
            };
        contact?:
          | T
          | {
              title?: T;
              subtitle?: T;
              contactInfo?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    primary?: T;
                    description?: T;
                    id?: T;
                  };
              officeImage?:
                | T
                | {
                    image?: T;
                    description?: T;
                  };
              form?:
                | T
                | {
                    title?: T;
                    formFields?:
                      | T
                      | {
                          fieldType?: T;
                          name?: T;
                          label?: T;
                          placeholder?: T;
                          required?: T;
                          width?: T;
                          options?:
                            | T
                            | {
                                label?: T;
                                value?: T;
                                id?: T;
                              };
                          rows?: T;
                          id?: T;
                        };
                    submitButton?:
                      | T
                      | {
                          text?: T;
                          loadingText?: T;
                        };
                    checkboxText?: T;
                    successMessage?: T;
                    disclaimer?: T;
                  };
              id?: T;
              blockName?: T;
            };
        header?:
          | T
          | {
              logo?:
                | T
                | {
                    title?: T;
                    subtitle?: T;
                  };
              navigation?:
                | T
                | {
                    label?: T;
                    href?: T;
                    id?: T;
                  };
              contactButton?:
                | T
                | {
                    text?: T;
                    phone?: T;
                  };
              id?: T;
              blockName?: T;
            };
        footer?:
          | T
          | {
              logo?:
                | T
                | {
                    title?: T;
                    subtitle?: T;
                    description?: T;
                  };
              sections?:
                | T
                | {
                    title?: T;
                    links?:
                      | T
                      | {
                          label?: T;
                          href?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              contact?:
                | T
                | {
                    phone?: T;
                    phoneDescription?: T;
                    email?: T;
                    emailDescription?: T;
                    address?: T;
                    addressLine2?: T;
                    addressDescription?: T;
                  };
              copyright?: T;
              legalLinks?:
                | T
                | {
                    label?: T;
                    href?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        mapSectionBlock?: T | MapSectionBlockSelect<T>;
        blogCarousel?:
          | T
          | {
              title?: T;
              subtitle?: T;
              collection?: T;
              postsLimit?: T;
              id?: T;
              blockName?: T;
            };
        whyChooseUs?:
          | T
          | {
              title?: T;
              subtitle?: T;
              choices?:
                | T
                | {
                    icon?: T;
                    color?: T;
                    title?: T;
                    description?: T;
                    statValue?: T;
                    statLabel?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        landingProcess?:
          | T
          | {
              title?: T;
              subtitle?: T;
              steps?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        mortgageCalculator?:
          | T
          | {
              title?: T;
              subtitle?: T;
              description?: T;
              defaultValues?:
                | T
                | {
                    homePrice?: T;
                    downPayment?: T;
                    interestRate?: T;
                    loanTerm?: T;
                  };
              id?: T;
              blockName?: T;
            };
        landingCTA?:
          | T
          | {
              mode?: T;
              title?: T;
              subtitle?: T;
              primaryButtonText?: T;
              primaryButtonTarget?: T;
              secondaryButtonText?: T;
              secondaryButtonTarget?: T;
              phoneNumber?: T;
              id?: T;
              blockName?: T;
            };
        resourceBlock?:
          | T
          | {
              mode?: T;
              imagePosition?: T;
              mainContent?:
                | T
                | {
                    badgeText?: T;
                    title?: T;
                    description?: T;
                    highlight?: T;
                    buttonText?: T;
                    buttonAction?: T;
                  };
              imageContent?:
                | T
                | {
                    mainImage?: T;
                    imageAlt?: T;
                    imageCaption?: T;
                    imageSubcaption?: T;
                  };
              resources?:
                | T
                | {
                    title?: T;
                    subtitle?: T;
                    items?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          icon?: T;
                          color?: T;
                          buttonText?: T;
                          buttonAction?: T;
                          id?: T;
                        };
                  };
              id?: T;
              blockName?: T;
            };
        evaluationGratuite?:
          | T
          | {
              title?: T;
              description?: T;
              closingStatement?: T;
              ctaText?: T;
              ctaTarget?: T;
              benefitsTitle?: T;
              benefits?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              deliverablesTitle?: T;
              deliverables?:
                | T
                | {
                    icon?: T;
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        landingHero?:
          | T
          | {
              mode?: T;
              badgeText?: T;
              title?: T;
              subtitle?: T;
              description?: T;
              stats?:
                | T
                | {
                    value?: T;
                    label?: T;
                    id?: T;
                  };
              primaryButton?:
                | T
                | {
                    text?: T;
                    actionType?: T;
                    scrollTarget?: T;
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                        };
                  };
              secondaryButton?:
                | T
                | {
                    text?: T;
                    actionType?: T;
                    scrollTarget?: T;
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                        };
                  };
              formTitle?: T;
              formFields?:
                | T
                | {
                    addressPlaceholder?: T;
                    timeframePlaceholder?: T;
                    propertyTypePlaceholder?: T;
                    cityPlaceholder?: T;
                    firstNamePlaceholder?: T;
                    lastNamePlaceholder?: T;
                    phonePlaceholder?: T;
                    emailPlaceholder?: T;
                    submitButtonText?: T;
                    disclaimerText?: T;
                  };
              timeframeOptions?:
                | T
                | {
                    option?: T;
                    id?: T;
                  };
              propertyTypeOptions?:
                | T
                | {
                    option?: T;
                    id?: T;
                  };
              backgroundImage?: T;
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MapSectionBlock_select".
 */
export interface MapSectionBlockSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  properties?:
    | T
    | {
        id?: T;
        address?: T;
        price?: T;
        status?: T;
        type?: T;
      };
  serviceAreas?:
    | T
    | {
        name?: T;
        status?: T;
        badgeColor?: T;
        bgColor?: T;
        borderColor?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}